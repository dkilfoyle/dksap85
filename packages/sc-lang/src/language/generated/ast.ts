/******************************************************************************
 * This file was generated by langium-cli 3.3.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import type { AstNode, Reference, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';

export const ScTerminals = {
    WS: /\s+/,
    ID: /[_a-zA-Z][\w_]*/,
    NUMBER: /[0-9]+(\.[0-9]+)?/,
    STRING: /"[^"]*"/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
};

export type ScTerminalNames = keyof typeof ScTerminals;

export type ScKeywordNames = 
    | "!"
    | "!="
    | "("
    | ")"
    | "*"
    | "+"
    | ","
    | "-"
    | "/"
    | ";"
    | "<"
    | "<="
    | "="
    | "=="
    | ">"
    | ">="
    | "and"
    | "char"
    | "else"
    | "for"
    | "if"
    | "int"
    | "or"
    | "return"
    | "while"
    | "{"
    | "}";

export type ScTokenNames = ScTerminalNames | ScKeywordNames;

export type Definition = FunctionDeclaration | NamedElement;

export const Definition = 'Definition';

export function isDefinition(item: unknown): item is Definition {
    return reflection.isInstance(item, Definition);
}

export type Expression = BinaryExpression | CharExpression | MemberCall | NumberExpression | UnaryExpression;

export const Expression = 'Expression';

export function isExpression(item: unknown): item is Expression {
    return reflection.isInstance(item, Expression);
}

export type NamedElement = FunctionDeclaration | Parameter | VariableDeclaration;

export const NamedElement = 'NamedElement';

export function isNamedElement(item: unknown): item is NamedElement {
    return reflection.isInstance(item, NamedElement);
}

export type Statement = AssignmentStatement | Expression | ForStatement | IfStatement | NamedElement | ReturnStatement | WhileStatement;

export const Statement = 'Statement';

export function isStatement(item: unknown): item is Statement {
    return reflection.isInstance(item, Statement);
}

export interface AssignmentStatement extends AstNode {
    readonly $container: Block | ForStatement;
    readonly $type: 'AssignmentStatement';
    value: Expression;
    varRef: Reference<VariableDeclaration>;
}

export const AssignmentStatement = 'AssignmentStatement';

export function isAssignmentStatement(item: unknown): item is AssignmentStatement {
    return reflection.isInstance(item, AssignmentStatement);
}

export interface BinaryExpression extends AstNode {
    readonly $container: AssignmentStatement | BinaryExpression | Block | ForStatement | IfStatement | MemberCall | ReturnStatement | UnaryExpression | VariableDeclaration | WhileStatement;
    readonly $type: 'BinaryExpression';
    left: Expression;
    operator: '!=' | '*' | '+' | '-' | '/' | '<' | '<=' | '==' | '>' | '>=' | 'and' | 'or';
    right: Expression;
}

export const BinaryExpression = 'BinaryExpression';

export function isBinaryExpression(item: unknown): item is BinaryExpression {
    return reflection.isInstance(item, BinaryExpression);
}

export interface Block extends AstNode {
    readonly $container: ForStatement | FunctionDeclaration | IfStatement | WhileStatement;
    readonly $type: 'Block';
    statements: Array<Statement>;
}

export const Block = 'Block';

export function isBlock(item: unknown): item is Block {
    return reflection.isInstance(item, Block);
}

export interface CharExpression extends AstNode {
    readonly $container: AssignmentStatement | BinaryExpression | Block | ForStatement | IfStatement | MemberCall | ReturnStatement | UnaryExpression | VariableDeclaration | WhileStatement;
    readonly $type: 'CharExpression';
    value: string;
}

export const CharExpression = 'CharExpression';

export function isCharExpression(item: unknown): item is CharExpression {
    return reflection.isInstance(item, CharExpression);
}

export interface ForStatement extends AstNode {
    readonly $container: Block;
    readonly $type: 'ForStatement';
    block: Block;
    condition?: Expression;
    counter?: NamedElement;
    execution?: AssignmentStatement;
}

export const ForStatement = 'ForStatement';

export function isForStatement(item: unknown): item is ForStatement {
    return reflection.isInstance(item, ForStatement);
}

export interface FunctionDeclaration extends AstNode {
    readonly $container: Block | ForStatement | Program;
    readonly $type: 'FunctionDeclaration';
    body: Block;
    name: string;
    parameters: Array<Parameter>;
    returnType: boolean;
}

export const FunctionDeclaration = 'FunctionDeclaration';

export function isFunctionDeclaration(item: unknown): item is FunctionDeclaration {
    return reflection.isInstance(item, FunctionDeclaration);
}

export interface IfStatement extends AstNode {
    readonly $container: Block;
    readonly $type: 'IfStatement';
    block: Block;
    condition: Expression;
    elseBlock?: Block;
}

export const IfStatement = 'IfStatement';

export function isIfStatement(item: unknown): item is IfStatement {
    return reflection.isInstance(item, IfStatement);
}

export interface MemberCall extends AstNode {
    readonly $container: AssignmentStatement | BinaryExpression | Block | ForStatement | IfStatement | MemberCall | ReturnStatement | UnaryExpression | VariableDeclaration | WhileStatement;
    readonly $type: 'MemberCall';
    arguments: Array<Expression>;
    element: Reference<NamedElement>;
    explicitOperationCall: boolean;
}

export const MemberCall = 'MemberCall';

export function isMemberCall(item: unknown): item is MemberCall {
    return reflection.isInstance(item, MemberCall);
}

export interface NumberExpression extends AstNode {
    readonly $container: AssignmentStatement | BinaryExpression | Block | ForStatement | IfStatement | MemberCall | ReturnStatement | UnaryExpression | VariableDeclaration | WhileStatement;
    readonly $type: 'NumberExpression';
    value: number;
}

export const NumberExpression = 'NumberExpression';

export function isNumberExpression(item: unknown): item is NumberExpression {
    return reflection.isInstance(item, NumberExpression);
}

export interface Parameter extends AstNode {
    readonly $container: Block | ForStatement | FunctionDeclaration | Program;
    readonly $type: 'Parameter';
    name: string;
    type: TypeReference;
}

export const Parameter = 'Parameter';

export function isParameter(item: unknown): item is Parameter {
    return reflection.isInstance(item, Parameter);
}

export interface Program extends AstNode {
    readonly $type: 'Program';
    definitions: Array<Definition>;
}

export const Program = 'Program';

export function isProgram(item: unknown): item is Program {
    return reflection.isInstance(item, Program);
}

export interface ReturnStatement extends AstNode {
    readonly $container: Block;
    readonly $type: 'ReturnStatement';
    value?: Expression;
}

export const ReturnStatement = 'ReturnStatement';

export function isReturnStatement(item: unknown): item is ReturnStatement {
    return reflection.isInstance(item, ReturnStatement);
}

export interface TypeReference extends AstNode {
    readonly $container: Parameter | VariableDeclaration;
    readonly $type: 'TypeReference';
    primitive: 'char' | 'int';
}

export const TypeReference = 'TypeReference';

export function isTypeReference(item: unknown): item is TypeReference {
    return reflection.isInstance(item, TypeReference);
}

export interface UnaryExpression extends AstNode {
    readonly $container: AssignmentStatement | BinaryExpression | Block | ForStatement | IfStatement | MemberCall | ReturnStatement | UnaryExpression | VariableDeclaration | WhileStatement;
    readonly $type: 'UnaryExpression';
    operator: '!' | '-';
    value: Expression;
}

export const UnaryExpression = 'UnaryExpression';

export function isUnaryExpression(item: unknown): item is UnaryExpression {
    return reflection.isInstance(item, UnaryExpression);
}

export interface VariableDeclaration extends AstNode {
    readonly $container: Block | ForStatement | Program;
    readonly $type: 'VariableDeclaration';
    assignment: boolean;
    name: string;
    type: TypeReference;
    value?: Expression;
}

export const VariableDeclaration = 'VariableDeclaration';

export function isVariableDeclaration(item: unknown): item is VariableDeclaration {
    return reflection.isInstance(item, VariableDeclaration);
}

export interface WhileStatement extends AstNode {
    readonly $container: Block;
    readonly $type: 'WhileStatement';
    block: Block;
    condition: Expression;
}

export const WhileStatement = 'WhileStatement';

export function isWhileStatement(item: unknown): item is WhileStatement {
    return reflection.isInstance(item, WhileStatement);
}

export type ScAstType = {
    AssignmentStatement: AssignmentStatement
    BinaryExpression: BinaryExpression
    Block: Block
    CharExpression: CharExpression
    Definition: Definition
    Expression: Expression
    ForStatement: ForStatement
    FunctionDeclaration: FunctionDeclaration
    IfStatement: IfStatement
    MemberCall: MemberCall
    NamedElement: NamedElement
    NumberExpression: NumberExpression
    Parameter: Parameter
    Program: Program
    ReturnStatement: ReturnStatement
    Statement: Statement
    TypeReference: TypeReference
    UnaryExpression: UnaryExpression
    VariableDeclaration: VariableDeclaration
    WhileStatement: WhileStatement
}

export class ScAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return [AssignmentStatement, BinaryExpression, Block, CharExpression, Definition, Expression, ForStatement, FunctionDeclaration, IfStatement, MemberCall, NamedElement, NumberExpression, Parameter, Program, ReturnStatement, Statement, TypeReference, UnaryExpression, VariableDeclaration, WhileStatement];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case AssignmentStatement:
            case Expression:
            case ForStatement:
            case IfStatement:
            case ReturnStatement:
            case WhileStatement: {
                return this.isSubtype(Statement, supertype);
            }
            case BinaryExpression:
            case CharExpression:
            case MemberCall:
            case NumberExpression:
            case UnaryExpression: {
                return this.isSubtype(Expression, supertype);
            }
            case FunctionDeclaration: {
                return this.isSubtype(Definition, supertype) || this.isSubtype(NamedElement, supertype);
            }
            case NamedElement: {
                return this.isSubtype(Definition, supertype) || this.isSubtype(Statement, supertype);
            }
            case Parameter:
            case VariableDeclaration: {
                return this.isSubtype(NamedElement, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'AssignmentStatement:varRef': {
                return VariableDeclaration;
            }
            case 'MemberCall:element': {
                return NamedElement;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case AssignmentStatement: {
                return {
                    name: AssignmentStatement,
                    properties: [
                        { name: 'value' },
                        { name: 'varRef' }
                    ]
                };
            }
            case BinaryExpression: {
                return {
                    name: BinaryExpression,
                    properties: [
                        { name: 'left' },
                        { name: 'operator' },
                        { name: 'right' }
                    ]
                };
            }
            case Block: {
                return {
                    name: Block,
                    properties: [
                        { name: 'statements', defaultValue: [] }
                    ]
                };
            }
            case CharExpression: {
                return {
                    name: CharExpression,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case ForStatement: {
                return {
                    name: ForStatement,
                    properties: [
                        { name: 'block' },
                        { name: 'condition' },
                        { name: 'counter' },
                        { name: 'execution' }
                    ]
                };
            }
            case FunctionDeclaration: {
                return {
                    name: FunctionDeclaration,
                    properties: [
                        { name: 'body' },
                        { name: 'name' },
                        { name: 'parameters', defaultValue: [] },
                        { name: 'returnType', defaultValue: false }
                    ]
                };
            }
            case IfStatement: {
                return {
                    name: IfStatement,
                    properties: [
                        { name: 'block' },
                        { name: 'condition' },
                        { name: 'elseBlock' }
                    ]
                };
            }
            case MemberCall: {
                return {
                    name: MemberCall,
                    properties: [
                        { name: 'arguments', defaultValue: [] },
                        { name: 'element' },
                        { name: 'explicitOperationCall', defaultValue: false }
                    ]
                };
            }
            case NumberExpression: {
                return {
                    name: NumberExpression,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case Parameter: {
                return {
                    name: Parameter,
                    properties: [
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case Program: {
                return {
                    name: Program,
                    properties: [
                        { name: 'definitions', defaultValue: [] }
                    ]
                };
            }
            case ReturnStatement: {
                return {
                    name: ReturnStatement,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case TypeReference: {
                return {
                    name: TypeReference,
                    properties: [
                        { name: 'primitive' }
                    ]
                };
            }
            case UnaryExpression: {
                return {
                    name: UnaryExpression,
                    properties: [
                        { name: 'operator' },
                        { name: 'value' }
                    ]
                };
            }
            case VariableDeclaration: {
                return {
                    name: VariableDeclaration,
                    properties: [
                        { name: 'assignment', defaultValue: false },
                        { name: 'name' },
                        { name: 'type' },
                        { name: 'value' }
                    ]
                };
            }
            case WhileStatement: {
                return {
                    name: WhileStatement,
                    properties: [
                        { name: 'block' },
                        { name: 'condition' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}

export const reflection = new ScAstReflection();
