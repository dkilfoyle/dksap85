/******************************************************************************
 * This file was generated by langium-cli 3.3.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
import { AbstractAstReflection } from 'langium';
export const AsmTerminals = {
    ID: /[_a-zA-Z][a-zA-Z0-9._]*/,
    EOL: /[\r\n]+/,
    COMMENT: /;[^\n\r]*/,
    NUMBER: /[0-9][0-9a-fA-F]*[h]?/,
    CHARACTER: /'[ -~]'/,
    WS: /[ \t]/,
};
export const Instruction = 'Instruction';
export function isInstruction(item) {
    return reflection.isInstance(item, Instruction);
}
export const AddrArgument = 'AddrArgument';
export function isAddrArgument(item) {
    return reflection.isInstance(item, AddrArgument);
}
export const Comment = 'Comment';
export function isComment(item) {
    return reflection.isInstance(item, Comment);
}
export const Directive = 'Directive';
export function isDirective(item) {
    return reflection.isInstance(item, Directive);
}
export const DirectiveArgument = 'DirectiveArgument';
export function isDirectiveArgument(item) {
    return reflection.isInstance(item, DirectiveArgument);
}
export const DirectiveOperation = 'DirectiveOperation';
export function isDirectiveOperation(item) {
    return reflection.isInstance(item, DirectiveOperation);
}
export const Imm16 = 'Imm16';
export function isImm16(item) {
    return reflection.isInstance(item, Imm16);
}
export const Imm8 = 'Imm8';
export function isImm8(item) {
    return reflection.isInstance(item, Imm8);
}
export const Instr = 'Instr';
export function isInstr(item) {
    return reflection.isInstance(item, Instr);
}
export const Label = 'Label';
export function isLabel(item) {
    return reflection.isInstance(item, Label);
}
export const Line = 'Line';
export function isLine(item) {
    return reflection.isInstance(item, Line);
}
export const Operation = 'Operation';
export function isOperation(item) {
    return reflection.isInstance(item, Operation);
}
export const Program = 'Program';
export function isProgram(item) {
    return reflection.isInstance(item, Program);
}
export const Reg16 = 'Reg16';
export function isReg16(item) {
    return reflection.isInstance(item, Reg16);
}
export const Reg8 = 'Reg8';
export function isReg8(item) {
    return reflection.isInstance(item, Reg8);
}
export class AsmAstReflection extends AbstractAstReflection {
    getAllTypes() {
        return [AddrArgument, Comment, Directive, DirectiveArgument, DirectiveOperation, Imm16, Imm8, Instr, Instruction, Label, Line, Operation, Program, Reg16, Reg8];
    }
    computeIsSubtype(subtype, supertype) {
        switch (subtype) {
            case Instr: {
                return this.isSubtype(Instruction, supertype);
            }
            default: {
                return false;
            }
        }
    }
    getReferenceType(refInfo) {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'AddrArgument:identifier':
            case 'DirectiveArgument:identifier':
            case 'Imm16:identifier': {
                return Label;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case AddrArgument: {
                return {
                    name: AddrArgument,
                    properties: [
                        { name: 'identifier' },
                        { name: 'number' }
                    ]
                };
            }
            case Comment: {
                return {
                    name: Comment,
                    properties: [
                        { name: 'comment' }
                    ]
                };
            }
            case Directive: {
                return {
                    name: Directive,
                    properties: [
                        { name: 'args', defaultValue: [] },
                        { name: 'dir' },
                        { name: 'lhs' }
                    ]
                };
            }
            case DirectiveArgument: {
                return {
                    name: DirectiveArgument,
                    properties: [
                        { name: 'identifier' },
                        { name: 'number' }
                    ]
                };
            }
            case DirectiveOperation: {
                return {
                    name: DirectiveOperation,
                    properties: [
                        { name: 'opname' }
                    ]
                };
            }
            case Imm16: {
                return {
                    name: Imm16,
                    properties: [
                        { name: 'identifier' },
                        { name: 'number' }
                    ]
                };
            }
            case Imm8: {
                return {
                    name: Imm8,
                    properties: [
                        { name: 'char' },
                        { name: 'number' }
                    ]
                };
            }
            case Instr: {
                return {
                    name: Instr,
                    properties: [
                        { name: 'arg1' },
                        { name: 'arg2' },
                        { name: 'op' }
                    ]
                };
            }
            case Label: {
                return {
                    name: Label,
                    properties: [
                        { name: 'name' }
                    ]
                };
            }
            case Line: {
                return {
                    name: Line,
                    properties: [
                        { name: 'comment' },
                        { name: 'dir' },
                        { name: 'instr' },
                        { name: 'label' }
                    ]
                };
            }
            case Operation: {
                return {
                    name: Operation,
                    properties: [
                        { name: 'opname' }
                    ]
                };
            }
            case Program: {
                return {
                    name: Program,
                    properties: [
                        { name: 'lines', defaultValue: [] }
                    ]
                };
            }
            case Reg16: {
                return {
                    name: Reg16,
                    properties: [
                        { name: 'register' }
                    ]
                };
            }
            case Reg8: {
                return {
                    name: Reg8,
                    properties: [
                        { name: 'register' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}
export const reflection = new AsmAstReflection();
