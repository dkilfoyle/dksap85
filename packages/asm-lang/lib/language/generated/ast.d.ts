/******************************************************************************
 * This file was generated by langium-cli 3.3.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
import type { AstNode, Reference, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';
export declare const AsmTerminals: {
    ID: RegExp;
    EOL: RegExp;
    COMMENT: RegExp;
    NUMBER: RegExp;
    CHARACTER: RegExp;
    WS: RegExp;
};
export type AsmTerminalNames = keyof typeof AsmTerminals;
export type AsmKeywordNames = "," | ":" | "a" | "aci" | "adc" | "add" | "adi" | "ana" | "ani" | "b" | "c" | "call" | "cc" | "cm" | "cma" | "cmc" | "cmp" | "cnc" | "cnz" | "cp" | "cpe" | "cpi" | "cpo" | "cz" | "d" | "dad" | "db" | "dcr" | "dcx" | "ds" | "dw" | "e" | "equ" | "h" | "hlt" | "inr" | "inx" | "jc" | "jm" | "jmp" | "jnc" | "jnz" | "jp" | "jpe" | "jpo" | "jz" | "l" | "lda" | "ldax" | "lhld" | "lxi" | "m" | "mov" | "mvi" | "nop" | "ora" | "org" | "ori" | "out" | "pchl" | "pop" | "psw" | "push" | "ral" | "rar" | "rc" | "ret" | "rlc" | "rm" | "rnc" | "rnz" | "rp" | "rpe" | "rpo" | "rrc" | "rz" | "sbb" | "sbi" | "shld" | "sp" | "sta" | "stax" | "stc" | "sub" | "sui" | "xchg" | "xra" | "xri" | "xthl";
export type AsmTokenNames = AsmTerminalNames | AsmKeywordNames;
export type Instruction = Instr;
export declare const Instruction = "Instruction";
export declare function isInstruction(item: unknown): item is Instruction;
export interface AddrArgument extends AstNode {
    readonly $container: Instr;
    readonly $type: 'AddrArgument';
    identifier?: Reference<Label>;
    number?: number;
}
export declare const AddrArgument = "AddrArgument";
export declare function isAddrArgument(item: unknown): item is AddrArgument;
export interface Comment extends AstNode {
    readonly $container: Line;
    readonly $type: 'Comment';
    comment: string;
}
export declare const Comment = "Comment";
export declare function isComment(item: unknown): item is Comment;
export interface Directive extends AstNode {
    readonly $container: Line;
    readonly $type: 'Directive';
    args: Array<DirectiveArgument>;
    dir: DirectiveOperation;
    lhs?: DirectiveArgument;
}
export declare const Directive = "Directive";
export declare function isDirective(item: unknown): item is Directive;
export interface DirectiveArgument extends AstNode {
    readonly $container: Directive;
    readonly $type: 'DirectiveArgument';
    identifier?: Reference<Label>;
    number?: number;
}
export declare const DirectiveArgument = "DirectiveArgument";
export declare function isDirectiveArgument(item: unknown): item is DirectiveArgument;
export interface DirectiveOperation extends AstNode {
    readonly $container: Directive;
    readonly $type: 'DirectiveOperation';
    opname: 'db' | 'ds' | 'dw' | 'equ' | 'org';
}
export declare const DirectiveOperation = "DirectiveOperation";
export declare function isDirectiveOperation(item: unknown): item is DirectiveOperation;
export interface Imm16 extends AstNode {
    readonly $container: Instr;
    readonly $type: 'Imm16';
    identifier?: Reference<Label>;
    number?: number;
}
export declare const Imm16 = "Imm16";
export declare function isImm16(item: unknown): item is Imm16;
export interface Imm8 extends AstNode {
    readonly $container: Instr;
    readonly $type: 'Imm8';
    char?: string;
    number?: number;
}
export declare const Imm8 = "Imm8";
export declare function isImm8(item: unknown): item is Imm8;
export interface Instr extends AstNode {
    readonly $container: Line;
    readonly $type: 'Instr';
    arg1?: AddrArgument | Imm8 | Reg16 | Reg8;
    arg2?: Imm16 | Imm8 | Reg8;
    op: Operation;
}
export declare const Instr = "Instr";
export declare function isInstr(item: unknown): item is Instr;
export interface Label extends AstNode {
    readonly $container: Line;
    readonly $type: 'Label';
    name: string;
}
export declare const Label = "Label";
export declare function isLabel(item: unknown): item is Label;
export interface Line extends AstNode {
    readonly $container: Program;
    readonly $type: 'Line';
    comment?: Comment;
    dir?: Directive;
    instr?: Instruction;
    label?: Label;
}
export declare const Line = "Line";
export declare function isLine(item: unknown): item is Line;
export interface Operation extends AstNode {
    readonly $container: Instr;
    readonly $type: 'Operation';
    opname: 'aci' | 'adc' | 'add' | 'adi' | 'ana' | 'ani' | 'call' | 'cc' | 'cm' | 'cma' | 'cmc' | 'cmp' | 'cnc' | 'cnz' | 'cp' | 'cpe' | 'cpi' | 'cpo' | 'cz' | 'dad' | 'dcr' | 'dcx' | 'hlt' | 'inr' | 'inx' | 'jc' | 'jm' | 'jmp' | 'jnc' | 'jnz' | 'jp' | 'jpe' | 'jpo' | 'jz' | 'lda' | 'ldax' | 'lhld' | 'lxi' | 'mov' | 'mvi' | 'nop' | 'ora' | 'ori' | 'out' | 'pchl' | 'pop' | 'push' | 'ral' | 'rar' | 'rc' | 'ret' | 'rlc' | 'rm' | 'rnc' | 'rnz' | 'rp' | 'rpe' | 'rpo' | 'rrc' | 'rz' | 'sbb' | 'sbi' | 'shld' | 'sta' | 'stax' | 'stc' | 'sub' | 'sui' | 'xchg' | 'xra' | 'xri' | 'xthl';
}
export declare const Operation = "Operation";
export declare function isOperation(item: unknown): item is Operation;
export interface Program extends AstNode {
    readonly $type: 'Program';
    lines: Array<Line>;
}
export declare const Program = "Program";
export declare function isProgram(item: unknown): item is Program;
export interface Reg16 extends AstNode {
    readonly $container: Instr;
    readonly $type: 'Reg16';
    register: 'b' | 'd' | 'h' | 'psw' | 'sp';
}
export declare const Reg16 = "Reg16";
export declare function isReg16(item: unknown): item is Reg16;
export interface Reg8 extends AstNode {
    readonly $container: Instr;
    readonly $type: 'Reg8';
    register: 'a' | 'b' | 'c' | 'd' | 'e' | 'h' | 'l' | 'm';
}
export declare const Reg8 = "Reg8";
export declare function isReg8(item: unknown): item is Reg8;
export type AsmAstType = {
    AddrArgument: AddrArgument;
    Comment: Comment;
    Directive: Directive;
    DirectiveArgument: DirectiveArgument;
    DirectiveOperation: DirectiveOperation;
    Imm16: Imm16;
    Imm8: Imm8;
    Instr: Instr;
    Instruction: Instruction;
    Label: Label;
    Line: Line;
    Operation: Operation;
    Program: Program;
    Reg16: Reg16;
    Reg8: Reg8;
};
export declare class AsmAstReflection extends AbstractAstReflection {
    getAllTypes(): string[];
    protected computeIsSubtype(subtype: string, supertype: string): boolean;
    getReferenceType(refInfo: ReferenceInfo): string;
    getTypeMetaData(type: string): TypeMetaData;
}
export declare const reflection: AsmAstReflection;
